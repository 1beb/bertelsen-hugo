[{"categories":null,"contents":"","date":"Jan 01","permalink":"https://bertelsen.ca/projects/wru/","tags":null,"title":"Who Are You"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://bertelsen.ca/projects/quant.pe/","tags":null,"title":"arkdb R package"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://bertelsen.ca/projects/crunchtabs/","tags":null,"title":"crunchtabs"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://bertelsen.ca/projects/fineventcentral/","tags":null,"title":"FinEventCentral.com"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://bertelsen.ca/projects/bertelsen-ca/","tags":null,"title":"Bertelsen.ca"},{"categories":["R","GDAL"],"contents":"The installation candidate for GDAL for Ubuntu 20.04 is quite old. The mapviews team has come up with some rather good new features that rely on v3.3.1 or newer.\nFirst, use the PPA from ubuntugis-unstable:\nsudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable # enter sudo apt-get update You must purge existing versions of gdal-bin, libkml, and libgdal on your machine. Note that your version numbers may vary (libgdal29, for example, may be something else)\nsudo apt-get purge --auto-remove libgdal sudo apt-get purge --auto-remove libgdal29 sudo apt-get purge --auto-remove gdal-bin sudo apt-get purge --auto-remove libkml-dev sudo apt-get purge --auto-remove libproj-dev sudo find /usr/local/bin/ -name 'gdal*' -delete sudo find /usr/local/lib/ -name 'libgdal*' -delete Install the version of the package from unstable ppa.\nsudo apt-get install libgdal-dev gdal-bin libproj15 libproj19 libproj-dev Now there are some problems with the libs from the unstable package but they are fairly straightforward to figure out. THe main issue is that some of the libs point to older versions of themselves or point to themselves in the wrong place.\nWhen attempting to install sf in R using install.packages('sf') you may encounter the following error:\nunable to load shared object '/usr/local/lib/R/site-library/terra/libs/terra.so': libproj.so.12: cannot open shared object file: No such file or directory This is telling you that for whatever reason it can not find libproj.so.12. You can correct this by creating a symbolic link between the version of libproj you are actually using and this older one. In my case, this was libproj15\nsudo ln -s /usr/lib/x86_64-linux-gnu/libproj.so.15 /usr/lib/libproj.so.12 You may experience any number of these \u0026ldquo;can\u0026rsquo;t find the lib durrrr\u0026rdquo; kind of problems. In my experience they were solved by first finding the actual lib available on my system and then symlinking them to the version desired by the R packages installation process.\nIn my case, the R package installation was looking in /usr/lib/ but it was actually in /usr/lib/x86_64-linux-gnu/. You don\u0026rsquo;t need to remember this, you can check for yourself with the following:\n$ dpkg -L libproj15 /. /usr /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/libproj.so.15.3.1 /usr/share /usr/share/doc /usr/share/doc/libproj15 /usr/share/doc/libproj15/AUTHORS /usr/share/doc/libproj15/NEWS.Debian.gz /usr/share/doc/libproj15/NEWS.gz /usr/share/doc/libproj15/README.gz /usr/share/doc/libproj15/changelog.Debian.gz /usr/share/doc/libproj15/copyright /usr/lib/x86_64-linux-gnu/libproj.so.15 Looking at the end there we see the lib. Just remember that creating the symlink is in the form sudo ln -s source target. Where source is what you would find in dpkg -L your_lib and target is what the R installation process complains about missing.\n","date":"Oct 29","permalink":"https://bertelsen.ca/post/gdal-3-3-1-on-ubuntu/","tags":null,"title":"Installing a newer version of gdal on Ubuntu 20.04"},{"categories":null,"contents":"   About this site  This site runs on hugo using the wonderful hugo-tania theme. The code for this site can be found on github. It is deployed via github action\n   About the Author  Interested parties are always welcome to introduce themselves via email: my firstname at my lastname dot ca.\n","date":"Nov 26","permalink":"https://bertelsen.ca/about/","tags":null,"title":"About"},{"categories":null,"contents":"","date":"Nov 26","permalink":"https://bertelsen.ca/articles/","tags":null,"title":"Notes"},{"categories":null,"contents":"","date":"Nov 26","permalink":"https://bertelsen.ca/projects/","tags":null,"title":"Projects"},{"categories":["R","Rcpp"],"contents":"Instructions for using Rcpp and Roxygen2 together. This assumes that Roxygen2 is managing your namespace:\nDESCRIPTION:\n In your DESCRIPTION file, add the line LinkingTo: Rcpp Also ensure that you import Rcpp, Imports: Rcpp along with all the other packages are imported in your namespace.  Package Documentation:\n Your package documentation (by convention in zzz.R or package.R) you should have the following:  1 2 3 4 5 6 7 8 9 10 11  #\u0026#39; your_package #\u0026#39;  #\u0026#39; Description of your package #\u0026#39;  #\u0026#39; @docType package #\u0026#39; @author you \u0026lt;youremail\u0026gt; #\u0026#39; @import Rcpp another_package another #\u0026#39; @importFrom Rcpp evalCpp #\u0026#39; @useDynLib your_package #\u0026#39; @name your_package NULL   Functions:\n Add *.cpp files to /src directory. Remember to use //' as your comment so that Roxygen2 picks it up appropriately. Remember to include [[Rcpp:export]] so that it is picked up by Rcpp::compileAttributes() when you build and reload or run roxygenize() manually as per your project options  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #include \u0026lt;Rcpp.h\u0026gt; using namespace Rcpp; //\u0026#39; Leading NA //\u0026#39; //\u0026#39; This function returns a logical vector identifying if //\u0026#39; there are leading NA, marking the leadings NA as TRUE and //\u0026#39; everything else as FALSE. //\u0026#39; //\u0026#39; @param x An integer vector //\u0026#39; @export // [[Rcpp::export]] LogicalVector leading_na(IntegerVector x) { int n = x.size(); LogicalVector leading_na(n); int i = 0; while((i \u0026lt; n) \u0026amp;\u0026amp;(x[i] == NA_INTEGER)) { leading_na[i] = TRUE; i++; } return leading_na; }   ","date":"Aug 28","permalink":"https://bertelsen.ca/post/rcpp-roxygen2/","tags":null,"title":"Rcpp and roxygem2"},{"categories":["R","Rcpp"],"contents":"Dealing with NA in Rcpp can be a bit tricky to sort out, but the speed boosts are incredible and if you\u0026rsquo;re dealing with large data - worth the time to figure it out. But usage cases are important to consider in the example below you can see that vectorized operations are still very competitive and very concise. Rcpp doesn\u0026rsquo;t shine so much in this example, but it can when you have a problem that requires a waterfall of results (one result relies on the next and so on).\nHere\u0026rsquo;s a basic function that takes NA values into account and basically converts anything \u0026lt; 0 to -1 and anything \u0026gt; 0 to +1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57  library(Rcpp) library(microbenchmark) signR \u0026lt;- function(x) { for(i in 1:length(x)) { if(is.na(x[i])) { next } if (x[i] \u0026gt; 0) { x[i] \u0026lt;- 1 } else { x[i] \u0026lt;- -1 } } return(x) } signR2 \u0026lt;- function(x) { x[x \u0026gt; 0] \u0026lt;- 1 x[x \u0026lt; 0] \u0026lt;- -1 x } cppFunction(\u0026#39; NumericVector signC(NumericVector x) { int n = x.size(); NumericVector out(n); for(int i = 0; i\u0026lt;n; ++i ) { if (NumericVector::is_na(x[i])) { out[i] = NA_REAL; } else if (x[i] \u0026gt; 0) { out[i] = 1; } else { out[i] = -1; } } return out; }\u0026#39;) test \u0026lt;- sample(c(rnorm(25),NA),100000, replace = TRUE) microbenchmark( signR(test), signR2(test), signC(test) ) # Unit: milliseconds # expr min lq mean median uq max neval # signR(test) 197.676873 201.344711 205.951881 202.437384 204.712847 317.973634 100 # signR2(test) 4.267238 4.335184 4.424379 4.412983 4.467380 4.869512 100 # signC(test) 2.095438 2.120071 2.185537 2.160100 2.219835 2.676364 100 all.equal(signR(test),signR2(test),signC(test)) # TRUE   ","date":"Aug 28","permalink":"https://bertelsen.ca/post/rcpp-and-na/","tags":null,"title":"Rcpp example using NA"},{"categories":["R","Maps"],"contents":"Although we were able to scrape from the web the FSA we wanted, it was unfortunately not a complete list. Instead, let\u0026rsquo;s try another route using some data that\u0026rsquo;s been crowdsourced, namely the geocoder.ca dataset or a subset provided by aggdata (as the geocoder.ca table is 50mbs and I don\u0026rsquo;t need that level of accuracy).\nLet\u0026rsquo;s install some packages first. You may need to install some system files for this to work:\n1  sudo apt-get install libgeos-dev libgdal1-dev libproj-dev   Now we can install the appropriate packages in R, if they aren\u0026rsquo;t already:\n1  install.packages(\u0026#34;maptools\u0026#34;,\u0026#34;rgeos\u0026#34;,\u0026#34;rgdal\u0026#34;)   Now we can run a short script to find the FSA\u0026rsquo;s within the boundaries of our economic region.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  library(ggplot2) library(maptools) library(rgeos) library(rgdal) # Canadian shapefiles # select your own (https://goo.gl/ztd9HY) or  # economic regions (http://goo.gl/YiHMhY) direct download shp \u0026lt;- file.path(\u0026#34;path/to/ger_000b11a_e.shp\u0026#34;) map \u0026lt;- readShapePoly(shp, proj4string = CRS(\u0026#34;+init=epsg:25832\u0026#34;)) sel \u0026lt;- map$ERNAME == \u0026#34;Montérégie\u0026#34; # https://www.aggdata.com/download_sample.php?file=ca_postal_codes.csv fsa_db \u0026lt;- read.csv(\u0026#34;https://goo.gl/q97K3L\u0026#34;, fileEncoding = \u0026#34;Windows-1252\u0026#34;) setNames(fsa_db, c(\u0026#34;fsa\u0026#34;,\u0026#34;place\u0026#34;,\u0026#34;province\u0026#34;,\u0026#34;lat\u0026#34;,\u0026#34;long\u0026#34;)) region \u0026lt;- map[sel,] points \u0026lt;- data.frame(long=as.numeric(fsa_db$long), lat =as.numeric(fsa_db$lat), id =fsa_db$fsa, stringsAsFactors=F) # We know that Monteregie is in JXX FSAs points$yes \u0026lt;- substr(points$id,0,1) == \u0026#34;J\u0026#34; points \u0026lt;- points[points$yes,] # Identify if FSA Long/Lat is within Economic Region listing \u0026lt;- list() for(i in 1:nrow(points)) { p1 \u0026lt;- points[i,1:2] sp2 \u0026lt;- SpatialPoints(p1,proj4string=CRS(proj4string(region))) listing[[i]] \u0026lt;- gContains(region,sp2) } points \u0026lt;- points[listing %\u0026gt;% unlist,] ggplot(region, aes(x=long,y=lat,group=group))+ geom_polygon(fill=\u0026#34;lightgreen\u0026#34;)+ geom_path(colour=\u0026#34;grey50\u0026#34;) + geom_point(data=points,aes(x=long,y=lat,group=NULL, color=id), size=1) + coord_fixed() + theme(legend.position = \u0026#34;none\u0026#34;)   ","date":"Aug 15","permalink":"https://bertelsen.ca/post/montreal-scraping-2/","tags":null,"title":"Montreal FSA Scraping Part Dieux"},{"categories":["Python","Django"],"contents":"I had a project that I wrote in Django, 1.4, back in 2012. It\u0026rsquo;s still in production and there are no problems with it. The only exception being that there are planned changes to the database schema. Weighing my options, I decided to move forward with an upgrade to Django 1.10, because migrations are now \u0026ldquo;built-in\u0026rdquo; and data reliability is more important to me than a few extra hours of trouble-shooting the differences between the versions.\nHere are the issues that effected me, when moving from Django 1.4 to 1.10.\n   Changes to settings.py  There are no longer TEMPLATE_* variables in the settings.py file you should remove them\n The settings file now uses os and you should setup a variable called BASE_DIR  1 2  import os BASE_DIR = \u0026#34;/path/to/your/app\u0026#34;    The TEMPLATES_DIRS now looks very different (example below)  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  TEMPLATES = [ { \u0026#39;BACKEND\u0026#39;: \u0026#39;django.template.backends.django.DjangoTemplates\u0026#39;, \u0026#39;DIRS\u0026#39;: [os.path.join(BASE_DIR, \u0026#39;templates\u0026#39;)], \u0026#39;APP_DIRS\u0026#39;: True, \u0026#39;OPTIONS\u0026#39;: { \u0026#39;context_processors\u0026#39;: [ \u0026#39;django.template.context_processors.debug\u0026#39;, \u0026#39;django.template.context_processors.request\u0026#39;, \u0026#39;django.contrib.auth.context_processors.auth\u0026#39;, \u0026#39;django.contrib.messages.context_processors.messages\u0026#39;, ], }, }, ]    MIDDLEWARE_CLASSES is now just MIDDLEWARE     Changes to urls.py   Some internal packages have changed, patterns no longer exists or is not necessary in django.conf.urls.defaults. There is also a newer element called settings that will need to be You also now have to import your other apps directly if you\u0026rsquo;re going to reference them in a single urls.py  1 2 3 4 5 6 7 8 9  from django.conf import settings from django.conf.urls import url, include from django.contrib.staticfiles import views from django.conf.urls.static import static from django.contrib import admin from django.contrib.auth import views as auth_views from credoapp.api import BCSResource, ResponseResource import your_other_app from your_other_app import views    urlpatterns no longer uses patterns('',\u0026hellip;)  1 2 3 4  # Before  # urlpatterns = patterns(\u0026#39;\u0026#39;, ...,)` # Now  urlpatterns = [...,]    Quotations or ticks surrounding url view definitions are no longer necessary  1 2 3 4  # Before # url(r\u0026#39;^$\u0026#39;, \u0026#39;your_other_app.views.index\u0026#39;, name=\u0026#39;home\u0026#39;) # Now url(r\u0026#39;^$\u0026#39;, your_other_app.views.index, name=\u0026#39;home\u0026#39;)    The syntax for django.contrib.auth.views.login and .logout is slightly different  1 2 3 4 5 6  # Before # url(r\u0026#39;^login/$\u0026#39;, \u0026#39;django.contrib.auth.views.login\u0026#39;, {\u0026#39;template_name\u0026#39;: \u0026#39;login.html\u0026#39;}), # url(r\u0026#39;^logout/$\u0026#39;, \u0026#39;django.contrib.auth.views.logout\u0026#39;, { \u0026#39;next_page\u0026#39;: \u0026#39;/login/\u0026#39;}), # Now url(r\u0026#39;^login/$\u0026#39;, auth_views.login), url(r\u0026#39;^logout/$\u0026#39;, auth_views.logout, { \u0026#39;next_page\u0026#39;: \u0026#39;/login/\u0026#39;})    django.contrib.auth.views.login also expects a template for your login page in your templates directory under registration/login.html     Changes to Forms  Forms now require fields to be specified, in my case this was really straightforward, I just needed to add fields = '__all__' to my form classes.\n1 2 3 4 5 6 7 8 9  # Before class SomeModelForm(forms.ModelForm) class Meta: model = SomeModel # Now class SomeModelForm(forms.ModelForm) class Meta: model = SomeModel fields = \u0026#34;__all__\u0026#34;      Changes to models.py   email_re was removed, in favour of validate_email. No validation raise error required, validate_email does this automatically.  1 2 3 4 5 6 7 8 9  # Before # from django.core.validators import email_re # Now  from django.core.validators import validate_email ... # Before # email_re.match(email)  # Now validate_email(email)      Changes to Templates in General   References to urls need to be changed using their namespace (if applicable, not in my case) or using their name. References to urls need to be changed using their name, and should be quoted These can exist everywhere, recommend using find in files % url to find them all and be methodical!  1 2 3 4  # Before # \u0026lt;a href=\u0026#34;{% url someapp.views.view_name kw1 %} # Now \u0026lt;a href=\u0026#34;{% url \u0026#39;view_name\u0026#39; kw1 %}   ","date":"Aug 15","permalink":"https://bertelsen.ca/post/upgrading-to-django-1-10/","tags":null,"title":"Updating Django 1.4 to 1.10 Learnings"},{"categories":["R","Maps","Scraping"],"contents":"There\u0026rsquo;s no official database that I can find to define clearly some of the economic areas in Montreal, at least none that are free. However, wikipedia does seem to be rather well organized in this regard. Small scale scraping to identify FSAs for a particular locale, in the example below, Montérégie or \u0026ldquo;Rive-Sud\u0026rdquo; an affluent part of the greater Montreal area.\n1 2 3 4 5 6 7 8 9 10 11  library(rvest) links \u0026lt;- read_html(\u0026#34;https://en.wikipedia.org/wiki/South_Shore_(Montreal)\u0026#34;) %\u0026gt;% html_node(css = \u0026#34;.column-count-3\u0026#34;) %\u0026gt;% html_nodes(\u0026#34;a\u0026#34;) %\u0026gt;% html_attr(\u0026#34;href\u0026#34;) links \u0026lt;- paste0(\u0026#34;http://en.wikipedia.org\u0026#34;,links) listing \u0026lt;- list() for(link in links) { listing[[link]] \u0026lt;- read_html(link) %\u0026gt;% html_node(\u0026#34;.adr\u0026#34;) %\u0026gt;% html_text() }   So far so good, but it looks like a bit of extra cleaning will be required.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026gt; listing %\u0026gt;% unlist() %\u0026gt;% as.character %\u0026gt;% strsplit(\u0026#34;,\u0026#34;) %\u0026gt;% unlist() [1] \u0026#34;J3G to J3H\u0026#34; \u0026#34;J4B\u0026#34; \u0026#34;J4W to J4Z\u0026#34; \u0026#34;J5R\u0026#34; \u0026#34;J3L\u0026#34; [6] \u0026#34;J3L\u0026#34; \u0026#34;J6J\u0026#34; \u0026#34; J6K\u0026#34; \u0026#34;J5B\u0026#34; \u0026#34;J0L1B0\u0026#34; [11] NA \u0026#34;J5R\u0026#34; \u0026#34;J3Y\u0026#34; \u0026#34; J3Z\u0026#34; \u0026#34; J4G to J4N\u0026#34; [16] \u0026#34; J4T\u0026#34; \u0026#34; J4V\u0026#34; \u0026#34;J4V\u0026#34; \u0026#34;J3Y\u0026#34; \u0026#34; J3Z\u0026#34; [21] \u0026#34; J4T\u0026#34; NA NA \u0026#34;J3G 6N9\u0026#34; \u0026#34;J3H\u0026#34; [26] \u0026#34;J3H 2M6\u0026#34; \u0026#34;J3L\u0026#34; \u0026#34;J0L 1N0\u0026#34; \u0026#34;J3N\u0026#34; \u0026#34;J3V\u0026#34; [31] \u0026#34;J5A\u0026#34; \u0026#34;J0L 2A0\u0026#34; \u0026#34;J3E\u0026#34; \u0026#34;J5C\u0026#34; \u0026#34;J4P\u0026#34; [36] \u0026#34; J4R\u0026#34; \u0026#34; J4S\u0026#34; \u0026#34;J3L 6Z5\u0026#34; \u0026#34;J0L 2K0\u0026#34; \u0026#34;J3X\u0026#34; trim \u0026lt;- function (x) gsub(\u0026#34;^\\\\s+|\\\\s+$\u0026#34;, \u0026#34;\u0026#34;, x) listing %\u0026gt;% unlist() %\u0026gt;% as.character %\u0026gt;% strsplit(\u0026#34;,\u0026#34;) %\u0026gt;% unlist() %\u0026gt;% strsplit(\u0026#34;to\u0026#34;) %\u0026gt;% unlist %\u0026gt;% na.omit() %\u0026gt;% trim %\u0026gt;% substr(start = 0, stop = 3)   And we have a list of FSAs for Montérégie pulled from what we hope is a good resource:\nJ3G J3H J4B J4W J4Z J5R J3L J3L J6J J6K J5B J0L J5R J3Y J3Z J4G J4N J4T J4V J4V J3Y J3Z J4T J3G J3H J3H J3L J0L J3N J3V J5A J0L J3E J5C J4P J4R J4S J3L J0L J3X ","date":"Aug 14","permalink":"https://bertelsen.ca/post/montreal-scraping/","tags":null,"title":"Montreal FSA Scraping"},{"categories":["R","Docker"],"contents":"Below is a very simple way to have https connections for the open source version of RStudio Server and Shiny Server.\n1 2 3  sudo apt-get install docker sudo apt-get install python-pip sudo pip install docker-compose   Now, in your user directory, create a text file using your preferred text editor, called docker-compose.yml, that looks like the following, keeping in mind that you need to replace: username with your ssh user name, SUB.YOURDOMAIN.COM, and YOUREMAIL. You can also change the docker images.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  nginx:image:nginxcontainer_name:nginxports:- \u0026#34;80:80\u0026#34;- \u0026#34;443:443\u0026#34;volumes:- /etc/nginx/conf.d- /etc/nginx/vhost.d- /usr/share/nginx/html- /home/username/proxy/certs:/etc/nginx/certs:ronginx-gen:image:jwilder/docker-gencontainer_name:nginx-genvolumes:- /var/run/docker.sock:/tmp/docker.sock:ro- /home/username/proxy/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:rovolumes_from:- nginxentrypoint:/usr/local/bin/docker-gen -notify-sighup nginx -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.confletsencrypt-nginx-proxy-companion:image:jrcs/letsencrypt-nginx-proxy-companioncontainer_name:letsencrypt-nginx-proxy-companionvolumes_from:- nginxvolumes:- /var/run/docker.sock:/var/run/docker.sock:ro- /home/username/proxy/certs:/etc/nginx/certs:rwenvironment:- NGINX_DOCKER_GEN_CONTAINER=nginx-genrstudio:image:rocker/hadleyversecontainer_name:rstudiorestart:alwaysports:- \u0026#34;8787:8787\u0026#34;environment:- VIRTUAL_PORT=8787- ROOT=TRUE- VIRTUAL_HOST=SUB.YOURDOMAIN.COM- USER=rstudio- PASSWORD=password- LETSENCRYPT_HOST=SUB.YOURDOMAIN.COM- LETSENCRYPT_EMAIL=YOUREMAIL  Adding a shiny server is trivial, simply add the following, note that the SUB domain should be different.\n1 2 3 4 5 6 7 8 9 10 11 12  shiny:image:rocker/shinycontainer_name:shinyrestart:alwaysenvironment:- VIRTUAL_HOST=SUB.YOURDOMAIN.COM- LETSENCRYPT_EMAIL=YOUREMAIL- LETSENCRYPT_HOST=SUB.YOURDOMAIN.COMvolumes:- /home/username/shiny/apps:/srv/shiny-server/- /home/username/shiny/logs:/var/log/- /home/username/shiny/packages:/home/shiny/  Now at the command line, type docker-compose up -d and watch magic happen.\n","date":"Jul 14","permalink":"https://bertelsen.ca/post/tls-rstudio-shiny/","tags":null,"title":"TLS for RStudio and Shiny using Let's Encrypt"},{"categories":["R","Docker"],"contents":"Most people are running open source projects, so they can easily use github and travis for free. I don\u0026rsquo;t have that luxury, but gitlab has really caught my attention lately. Combining gitlab, gitlab runner with docker makes things very straightforward. Here is an example .gitlab-ci.yml file that you would need to include in the base directory of your R project to have it run R CMD check and run testthat tests.\n1 2 3 4 5 6 7 8  image:rocker/rstudio test:script:- R -e \u0026#39;install.packages(c(\u0026#34;needed here\u0026#34;))\u0026#39;- R CMD build . --no-build-vignettes --no-manual- PKG_FILE_NAME=$(ls -1t *.tar.gz | head -n 1)- R CMD check \u0026#34;${PKG_FILE_NAME}\u0026#34; --no-build-vignettes --no-manual- R -e \u0026#39;devtools::test()\u0026#39;  ","date":"Jun 27","permalink":"https://bertelsen.ca/post/example-gitlab-ci/","tags":null,"title":"Example gitlab-ci.yml for R Projects"},{"categories":["R","Plotting"],"contents":"How to make a radial plot without using radial coordinates with plotly.\nLet\u0026rsquo;s load a few libraries and pull some sample data. Then do some preparation by adding data associated with turning the graphic into a circle. A trivial application of high school SOHCATTOA, and finally plot. Comments included at each step.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67  # Loading --------------------------------- library(plotly) library(dplyr) # just because!  source(\u0026#34;https://git.io/vole5\u0026#34;) # load data # Data Preperation ------------------------ df$theta \u0026lt;- seq(0,345,15) # 24 responses, equals 15 degrees per response  df$o \u0026lt;- df$Proportion * sin(df$theta * pi / 180) # SOH  df$a \u0026lt;- df$Proportion * cos(df$theta * pi / 180) # CAH  df$o100 \u0026lt;- 1 * sin(df$theta * pi / 180) # Outer ring x  df$a100 \u0026lt;- 1 * cos(df$theta * pi / 180) # Outer ring y  df$a75 \u0026lt;- 0.75 * cos(df$theta * pi / 180) # 75% ring y  df$o75 \u0026lt;- 0.75 * sin(df$theta * pi / 180) # 75% ring x  df$o50 \u0026lt;- 0.5 * sin(df$theta * pi / 180) # 50% ring x  df$a50 \u0026lt;- 0.5 * cos(df$theta * pi / 180) # 50% ring y # Plot ------------------------------------ p \u0026lt;- plot_ly() # Wire-frame lines from origin for(i in 1:24) { p \u0026lt;- add_trace( p, x = c(d$o100[i],0), y = c(d$a100[i],0), evaluate = TRUE, line = list(color = \u0026#34;#d3d3d3\u0026#34;, dash = \u0026#34;3px\u0026#34;), showlegend = FALSE ) } p %\u0026gt;% # Add lines  add_trace(data = d[c(1:48,1,25),], x = o, y = a, color = Year, mode = \u0026#34;lines+markers\u0026#34;, hoverinfo = \u0026#34;text\u0026#34;, text = paste(Year, Response,round(Proportion * 100), \u0026#34;%\u0026#34;)) %\u0026gt;% # Add 100% circle  add_trace(data = d, x = o100, y = a100, text = Response, hoverinfo = \u0026#34;none\u0026#34;, textposition = \u0026#34;top middle\u0026#34;, mode = \u0026#34;lines+text\u0026#34;, line = list(color = \u0026#34;#d3d3d3\u0026#34;, dash = \u0026#34;3px\u0026#34;, shape = \u0026#34;spline\u0026#34;), showlegend = FALSE) %\u0026gt;% # Add 50% circle add_trace(data = d, x = o50, y = a50, mode = \u0026#34;lines\u0026#34;, line = list(color = \u0026#34;#d3d3d3\u0026#34;, dash = \u0026#34;3px\u0026#34;, shape = \u0026#34;spline\u0026#34;), hoverinfo = \u0026#34;none\u0026#34;, showlegend = FALSE) %\u0026gt;% # Add 75% circle  add_trace(data = d, x = o75, y = a75, mode = \u0026#34;lines\u0026#34;, line = list(color = \u0026#34;#d3d3d3\u0026#34;, dash = \u0026#34;3px\u0026#34;, shape = \u0026#34;spline\u0026#34;), hoverinfo = \u0026#34;none\u0026#34;, showlegend = FALSE) %\u0026gt;% layout( autosize = FALSE, hovermode = \u0026#34;closest\u0026#34;, autoscale = TRUE, width = 800, height = 800, xaxis = list(range = c(-1.25,1.25), showticklabels = FALSE, zeroline = FALSE, showgrid = FALSE), yaxis = list(range = c(-1.25,1.25), showticklabels = FALSE, zeroline = FALSE, showgrid = FALSE) )   ","date":"Jun 14","permalink":"https://bertelsen.ca/post/radial-plots-plotly/","tags":null,"title":"Radial Plots with Plotly"},{"categories":["R"],"contents":"A quick example of bootstraping a logistic regression. Nothing special here, example could be extended to any other type of model that has a coef() method.\n1 2 3 4 5 6 7 8 9 10 11 12  library(boot) logit_test \u0026lt;- function(d,indices) { d \u0026lt;- d[indices,] fit \u0026lt;- glm(your ~ formula, data = d, family = \u0026#34;binomial\u0026#34;) return(coef(fit)) } boot_fit \u0026lt;- boot( data = your_data, statistic = logit_test, R = 1e5 )   ","date":"Aug 01","permalink":"https://bertelsen.ca/post/bootstrapping-logistic/","tags":null,"title":"Boostrap with logistic regression"},{"categories":["R"],"contents":"Take a vector, with some seperator (i.e., ;), vec and expand it into a data.frame, filling in NA positions:\n1 2 3 4 5 6 7  vec \u0026lt;- strsplit(as.character(vec), \u0026#34;;\u0026#34;) df \u0026lt;- rbind.fill( lapply( tmp, function(x) data.frame(t(x)) ) ) df \u0026lt;- as.data.frame(df)   ","date":"Jun 15","permalink":"https://bertelsen.ca/post/expand-vector-to-df/","tags":null,"title":"Expand strsplit to data.frame"}]
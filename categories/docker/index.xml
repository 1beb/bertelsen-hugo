<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on @beb</title><link>https://bertelsen.ca/categories/docker/</link><description>Recent content in Docker on @beb</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://bertelsen.ca/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>TLS for RStudio and Shiny using Let's Encrypt</title><link>https://bertelsen.ca/post/tls-rstudio-shiny/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>https://bertelsen.ca/post/tls-rstudio-shiny/</guid><description>Below is a very simple way to have https connections for the open source version of RStudio Server and Shiny Server.
1 2 3 sudo apt-get install docker sudo apt-get install python-pip sudo pip install docker-compose Now, in your user directory, create a text file using your preferred text editor, called docker-compose.yml, that looks like the following, keeping in mind that you need to replace: username with your ssh user name, SUB.</description></item><item><title>Example gitlab-ci.yml for R Projects</title><link>https://bertelsen.ca/post/example-gitlab-ci/</link><pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate><guid>https://bertelsen.ca/post/example-gitlab-ci/</guid><description>Most people are running open source projects, so they can easily use github and travis for free. I don&amp;rsquo;t have that luxury, but gitlab has really caught my attention lately. Combining gitlab, gitlab runner with docker makes things very straightforward. Here is an example .gitlab-ci.yml file that you would need to include in the base directory of your R project to have it run R CMD check and run testthat tests.</description></item></channel></rss>